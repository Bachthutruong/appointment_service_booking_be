"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const dotenv_1 = __importDefault(require("dotenv"));
const User_1 = require("../models/User");
const Customer_1 = require("../models/Customer");
const Service_1 = require("../models/Service");
const Product_1 = require("../models/Product");
dotenv_1.default.config();
const seedData = async () => {
    try {
        const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/appointment_booking';
        await mongoose_1.default.connect(mongoURI);
        console.log('Connected to MongoDB');
        // Clear existing data
        await User_1.User.deleteMany({});
        await Customer_1.Customer.deleteMany({});
        await Service_1.Service.deleteMany({});
        await Product_1.Product.deleteMany({});
        console.log('Cleared existing data');
        // Create admin user
        const adminUser = await User_1.User.create({
            email: process.env.ADMIN_EMAIL || 'admin@example.com',
            password: process.env.ADMIN_PASSWORD || 'admin123',
            name: 'Administrator',
            role: 'admin'
        });
        // Create employee user
        const employeeUser = await User_1.User.create({
            email: 'employee@example.com',
            password: 'employee123',
            name: 'Nh√¢n vi√™n 1',
            role: 'employee'
        });
        console.log('Created users');
        // Create sample customers
        const customers = await Customer_1.Customer.create([
            {
                name: 'Nguy·ªÖn Th·ªã Lan',
                phone: '0901234567',
                lineId: 'lan_nguyen',
                gender: 'female',
                dateOfBirth: new Date('1990-05-15'),
                notes: 'Kh√°ch h√†ng VIP, th√≠ch d·ªãch v·ª• chƒÉm s√≥c da'
            },
            {
                name: 'Tr·∫ßn VƒÉn Nam',
                phone: '0907654321',
                gender: 'male',
                dateOfBirth: new Date('1985-12-20'),
                notes: 'Kh√°ch h√†ng th∆∞·ªùng xuy√™n'
            },
            {
                name: 'L√™ Th·ªã Hoa',
                phone: '0912345678',
                lineId: 'hoa_le',
                gender: 'female',
                dateOfBirth: new Date('1992-08-10'),
                notes: 'Th√≠ch c√°c s·∫£n ph·∫©m chƒÉm s√≥c t√≥c'
            }
        ]);
        console.log('Created sample customers');
        // Create sample services
        const services = await Service_1.Service.create([
            {
                name: 'C·∫Øt t√≥c nam',
                description: 'D·ªãch v·ª• c·∫Øt t√≥c chuy√™n nghi·ªáp cho nam',
                price: 150000,
                duration: 30
            },
            {
                name: 'C·∫Øt t√≥c n·ªØ',
                description: 'D·ªãch v·ª• c·∫Øt t√≥c v√† t·∫°o ki·ªÉu cho n·ªØ',
                price: 200000,
                duration: 60
            },
            {
                name: 'Nhu·ªôm t√≥c',
                description: 'D·ªãch v·ª• nhu·ªôm t√≥c v·ªõi m√†u s·∫Øc ƒëa d·∫°ng',
                price: 500000,
                duration: 120
            },
            {
                name: 'ChƒÉm s√≥c da m·∫∑t',
                description: 'D·ªãch v·ª• chƒÉm s√≥c v√† l√†m ƒë·∫πp da m·∫∑t',
                price: 300000,
                duration: 90
            },
            {
                name: 'Massage th∆∞ gi√£n',
                description: 'D·ªãch v·ª• massage to√†n th√¢n th∆∞ gi√£n',
                price: 400000,
                duration: 60
            }
        ]);
        console.log('Created sample services');
        // Create sample products
        const products = await Product_1.Product.create([
            {
                name: 'D·∫ßu g·ªôi ƒë·∫ßu cao c·∫•p',
                description: 'D·∫ßu g·ªôi d√†nh cho m·ªçi lo·∫°i t√≥c',
                sellingPrice: 250000,
                costPrice: 150000,
                unit: 'chai',
                currentStock: 50,
                minStockAlert: 10
            },
            {
                name: 'Kem d∆∞·ª°ng da m·∫∑t',
                description: 'Kem d∆∞·ª°ng da ch·ªëng l√£o h√≥a',
                sellingPrice: 450000,
                costPrice: 300000,
                unit: 'h·ªôp',
                currentStock: 30,
                minStockAlert: 5
            },
            {
                name: 'Serum vitamin C',
                description: 'Serum l√†m s√°ng da v·ªõi vitamin C',
                sellingPrice: 350000,
                costPrice: 200000,
                unit: 'chai',
                currentStock: 25,
                minStockAlert: 5
            },
            {
                name: 'M·∫∑t n·∫° d∆∞·ª°ng ·∫©m',
                description: 'M·∫∑t n·∫° gi·∫•y d∆∞·ª°ng ·∫©m da m·∫∑t',
                sellingPrice: 50000,
                costPrice: 25000,
                unit: 'mi·∫øng',
                currentStock: 100,
                minStockAlert: 20
            },
            {
                name: 'Tinh d·∫ßu massage',
                description: 'Tinh d·∫ßu th∆∞ gi√£n cho massage',
                sellingPrice: 180000,
                costPrice: 100000,
                unit: 'chai',
                currentStock: 15,
                minStockAlert: 3
            }
        ]);
        console.log('Created sample products');
        console.log('‚úÖ Sample data seeded successfully!');
        console.log('\nüìã Login credentials:');
        console.log(`Admin: ${adminUser.email} / ${process.env.ADMIN_PASSWORD || 'admin123'}`);
        console.log(`Employee: ${employeeUser.email} / employee123`);
        process.exit(0);
    }
    catch (error) {
        console.error('‚ùå Error seeding data:', error);
        process.exit(1);
    }
};
seedData();
//# sourceMappingURL=seedData.js.map